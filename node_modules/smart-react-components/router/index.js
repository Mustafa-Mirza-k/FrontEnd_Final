'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var index = require('../index-6d498b59.js');
var DOMHelper = require('../DOMHelper-c0bd5a29.js');
var React = require('react');
var React__default = _interopDefault(React);
require('styled-components');
require('../index-1781dba3.js');
var Div = require('../Div-d2bf7bfb.js');
var UseLinkMethods = require('../UseLinkMethods-4a414131.js');
require('react-router');
var A = require('../A-e2a4a504.js');
var ProgressBar$1 = require('../ProgressBar-d40bfebb.js');

const SET_URL = "SET_URL";
const SET_NEW_URL = "SET_NEW_URL";
const SET_CANCEL_CALLBACK = "SET_CANCEL_CALLBACK";
const SET_PERCENTAGE = "SET_PERCENTAGE";
const SET_LOADER_MODULE = "SET_LOADER_MODULE";

const getInitialState = (url = UseLinkMethods.RouterHelper.getUrl()) => ({
    url: UseLinkMethods.RouterHelper.setUrl(url),
    newUrl: null,
    key: null,
    cancelCallback: null,
    percentage: 0,
    loaderModules: {}
});
const reducer = (state, action) => {
    switch (action.type) {
        case SET_URL:
            return Object.assign(Object.assign({}, state), { url: action.payload, newUrl: null, key: null, cancelCallback: null, percentage: 0 });
        case SET_NEW_URL:
            if (state.cancelCallback)
                state.cancelCallback();
            return Object.assign(Object.assign({}, state), { newUrl: action.payload, key: action.key, cancelCallback: null, percentage: 0 });
        case SET_CANCEL_CALLBACK:
            return Object.assign(Object.assign({}, state), { cancelCallback: state.key == action.key ? action.payload : state.cancelCallback });
        case SET_PERCENTAGE:
            if (state.key == action.key)
                return action.payload == 100 ? reducer(state, { type: SET_URL, payload: state.newUrl }) : Object.assign(Object.assign({}, state), { percentage: action.payload });
            else
                return state;
        case SET_LOADER_MODULE:
            return Object.assign(Object.assign({}, state), { loaderModules: Object.assign(Object.assign({}, state.loaderModules), { [action.path]: {
                        module: action.module,
                        exact: action.exact,
                        searchKeys: action.searchKeys
                    } }) });
        default:
            throw new Error();
    }
};

const ServerRouter = ({ children, url }) => {
    const [state, dispatch] = React__default.useReducer(reducer, getInitialState(url));
    return (React__default.createElement(UseLinkMethods.RouterContext.Provider, { value: { state, dispatch } }, children));
};

const setUrl = (url) => ({
    type: SET_URL,
    payload: url
});
const setNewUrl = (newUrl, key) => ({
    type: SET_NEW_URL,
    payload: newUrl,
    key
});
const setCancelCallback = (callback, key) => ({
    type: SET_CANCEL_CALLBACK,
    payload: callback,
    key
});
const setPercentage = (percentage, key) => ({
    type: SET_PERCENTAGE,
    payload: percentage,
    key
});
const setLoaderModule = (loaderModule, path, exact, searchKeys) => ({
    type: SET_LOADER_MODULE,
    module: loaderModule || null,
    path,
    exact,
    searchKeys
});

const ProgressBar = ({ progressBarProps = index.DV.JSX_ELEMENT_PROPS }) => {
    const router = React__default.useContext(UseLinkMethods.RouterContext);
    return (React__default.createElement(Div.Div, { position: "fixed", zIndex: "routerProgressBar", left: "0", right: "0", top: "0", style: (router.state.newUrl ? {} : { visibility: "hidden", pointerEvents: "none" }) },
        React__default.createElement(ProgressBar$1.ProgressBar$, Object.assign({}, progressBarProps, { percentage: router.state.percentage }))));
};

const ClientRouter = ({ children, params = {}, progressBarProps = index.DV.JSX_ELEMENT_PROPS }) => {
    const [state, dispatch] = React__default.useReducer(reducer, getInitialState());
    const setRouterUrl = React__default.useCallback((_url) => {
        const url = UseLinkMethods.RouterHelper.setUrl(_url);
        const oldUrlPathname = state.url.pathname;
        const oldUrlQuery = state.url.query;
        let loaderModules = [];
        for (let path in state.loaderModules) {
            let item = state.loaderModules[path];
            let match;
            let oldMatch;
            if (item.module &&
                (match = UseLinkMethods.RouterHelper.matchPath(url.pathname, url.query, { path, exact: item.exact, searchKeys: item.searchKeys })) &&
                (!(oldMatch = UseLinkMethods.RouterHelper.matchPath(oldUrlPathname, oldUrlQuery, { path, exact: item.exact, searchKeys: item.searchKeys })) ||
                    (oldMatch && oldMatch.key != match.key)))
                loaderModules.push({ module: item.module, match });
        }
        if (loaderModules.length == 0)
            dispatch(setUrl(url));
        else {
            let key = new Date().getTime().toString();
            dispatch(setNewUrl(url, key));
            (function () {
                return UseLinkMethods.__awaiter(this, void 0, void 0, function* () {
                    try {
                        const setPercentage$ = (payload) => dispatch(setPercentage(payload, key));
                        const setCancelCallback$ = (payload) => dispatch(setCancelCallback(payload, key));
                        setPercentage$(10);
                        for (let i in loaderModules) {
                            const module$ = yield loaderModules[i].module.preload();
                            yield module$.default.get(loaderModules[i].match, url, setPercentage$, setCancelCallback$, params);
                        }
                        setPercentage$(100);
                    }
                    catch (ignored) { }
                });
            }());
        }
    }, [state.loaderModules, state.url]);
    const popstate = () => setRouterUrl(UseLinkMethods.RouterHelper.getUrl());
    React__default.useEffect(() => {
        history.push = (url) => {
            history.pushState({}, null, url);
            setRouterUrl(UseLinkMethods.RouterHelper.getUrl());
        };
        history.replace = (url) => {
            history.replaceState({}, null, url);
            setRouterUrl(UseLinkMethods.RouterHelper.getUrl());
        };
        DOMHelper.DOMHelper.addEventListener(window, ["popstate"], popstate);
        return () => {
            DOMHelper.DOMHelper.removeEventListener(window, ["popstate"], popstate);
        };
    }, [state.loaderModules, state.url]);
    return (React__default.createElement(UseLinkMethods.RouterContext.Provider, { value: { state, dispatch } },
        React__default.createElement(ProgressBar, { progressBarProps: progressBarProps }),
        children));
};

const Switch = ({ children }) => {
    const router = React__default.useContext(UseLinkMethods.RouterContext);
    const getElements = () => {
        let switchNotRendered = false;
        return children.map((item, index) => {
            let el = React__default.cloneElement(item, { key: (item.key || index), switchNotRendered });
            if (!switchNotRendered && UseLinkMethods.RouterHelper.matchPath(router.state.url.pathname, router.state.url.query, { path: item.props.path, exact: item.props.exact, searchKeys: item.props.searchKeys }))
                switchNotRendered = true;
            return el;
        });
    };
    const [elements, setElements] = React__default.useState(() => getElements());
    const init = React__default.useRef(false);
    React__default.useEffect(() => {
        if (!init.current)
            init.current = true;
        else
            setElements(getElements());
    }, [children, router.state.url]);
    return React__default.createElement(React__default.Fragment, null, elements);
};

const Route = ({ path, exact, Component, render, loaderModule, searchKeys, switchNotRendered }) => {
    const router = React__default.useContext(UseLinkMethods.RouterContext);
    const [match, setMatch] = React__default.useState(() => UseLinkMethods.RouterHelper.matchPath(router.state.url.pathname, router.state.url.query, { path, exact, searchKeys }));
    React__default.useEffect(() => {
        setMatch(UseLinkMethods.RouterHelper.matchPath(router.state.url.pathname, router.state.url.query, { path, exact, searchKeys }));
    }, [router.state.url]);
    React__default.useEffect(() => {
        if (loaderModule || (!loaderModule && router.state.loaderModules[path]))
            router.dispatch(setLoaderModule(loaderModule, path, exact, searchKeys));
    }, [loaderModule]);
    return (React__default.createElement(React__default.Fragment, { key: match ? match.key : "" },
        (!switchNotRendered && match && typeof Component !== "undefined") && React__default.createElement(Component, { url: router.state.url, match: match }),
        render && render((!switchNotRendered && match ? match : null), router.state.url)));
};

const Link = ({ children, elementProps = index.DV.JSX_ELEMENT_PROPS, to }) => {
    const { click } = UseLinkMethods.useLinkMethods({ to, checkActive: false });
    return (React__default.createElement(A.A, Object.assign({}, elementProps, { href: to, onClick: click }), children));
};

const NavLink = ({ children, elementProps = index.DV.JSX_ELEMENT_PROPS, to, path, exact }) => {
    const { click, active, activating } = UseLinkMethods.useLinkMethods({ to, path, exact });
    return (React__default.createElement(A.A, Object.assign({}, elementProps, { href: to, onClick: click, className: `${elementProps.className || ""} ${active ? "active" : ""} ${activating ? "activating" : ""}` }), children));
};

const runLoaders = UseLinkMethods.RouterHelper.runLoaders.bind(UseLinkMethods.RouterHelper);

exports.RouterContext = UseLinkMethods.RouterContext;
exports.ClientRouter = ClientRouter;
exports.Link = Link;
exports.NavLink = NavLink;
exports.Route = Route;
exports.ServerRouter = ServerRouter;
exports.Switch = Switch;
exports.runLoaders = runLoaders;
