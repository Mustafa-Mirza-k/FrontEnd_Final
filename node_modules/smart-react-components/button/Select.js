'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var index = require('../index-6d498b59.js');
require('../DOMHelper-c0bd5a29.js');
var React = require('react');
var React__default = _interopDefault(React);
require('styled-components');
require('../index-1781dba3.js');
var Div = require('../Div-d2bf7bfb.js');
require('../Svg-5494338c.js');
require('../Close-e5f32b37.js');
require('../Badge-260e4ae6.js');
require('../Container-48ba71fa.js');
require('../Icon-7aca2465.js');
require('../Span-65e121ae.js');
require('../Text-7f09340d.js');
require('../A-e2a4a504.js');
require('react-dom');
var WaveEffect = require('../WaveEffect-9d69f3bc.js');
var Element = require('../Element-b7cd5b2f.js');
require('../Transition-48c5648c.js');
require('../CSSTransition-157762f7.js');
var Loading = require('../Loading-68c8479c.js');
require('../ArrowDown-19219318.js');
var UseSelectMethods = require('../UseSelectMethods-8eaa7c41.js');
require('../Overlay-c9458132.js');
var FixedBox = require('../FixedBox-75852d65.js');
var SelectFixedBoxElement = require('../SelectFixedBoxElement-fd64adab.js');
require('../UseInputMethod-e6937228.js');
require('../UseInputOutput-f9f1a610.js');
require('../SlideTransition-d17946ba.js');
require('../Label-d1f61e63.js');
require('../Input-a3426fbe.js');
require('../InputElement-e372853d.js');
var Input = require('../Input-19cf709f.js');

const ButtonSelect = ({ size = "default", sizeSm, sizeMd, sizeLg, sizeXl, buttonProps = index.DV.JSX_ELEMENT_PROPS, boxProps = index.DV.JSX_ELEMENT_PROPS, children, type = "primary", fill, border, shape = "default", block, waveEffect = "light", active, setActive, placeholder, hover = true, optionType = "primary", optionWaveEffect = "light", arrow = true, boxShadow, minWidth = 300, transitionClassName, transitionType, transitionDuration, showAnimation = true, hideAnimation = true, loading, loadingStatus, loadingTransitionClassName = "src-button-loading", loadingTransitionType = "ease-in-out", loadingTransitionDuration = 300, loadingTransitionShowAnimation = true, loadingTransitionHideAnimation = true, search, searchInputProps = index.DV.JSX_ELEMENT_PROPS }) => {
    const { itemList, searchText, setSearchText } = UseSelectMethods.useSelectMethods({ size, sizeSm, sizeMd, sizeLg, sizeXl, box: true, placeholder, optionType, arrow, children, fill, shape, hover, waveEffect: optionWaveEffect, disabled: buttonProps.disabled, active, setActive, closeBox: (() => setStatus(false)), search });
    const [status, setStatus] = React__default.useState(false);
    const fixedBoxOnRef = React__default.useRef(null);
    React__default.useEffect(() => {
        if (fixedBoxOnRef.current)
            fixedBoxOnRef.current.setPosition();
    }, [itemList]);
    const ButtonEl = (React__default.createElement(Element.ButtonElement, Object.assign({ tabIndex: 0 }, buttonProps, { as: "div", "size$": size, "size$Sm": sizeSm, "size$Md": sizeMd, "size$Lg": sizeLg, "size$Xl": sizeXl, "type$": type, "fill$": fill, "border$": border, shape: shape, block: block, "loading$": loading ? true : false, "data-src-placeholder-style": itemList.isPlaceholder, "data-src-active": status }),
        loading && React__default.createElement(Loading.Loading, { element: loading, status: loadingStatus, transitionClassName: loadingTransitionClassName, transitionDuration: loadingTransitionDuration, transitionType: loadingTransitionType, transitionShowAnimation: loadingTransitionShowAnimation, transitionHideAnimation: loadingTransitionHideAnimation }),
        itemList.active));
    const FragmentEl = waveEffect ? React__default.createElement(WaveEffect.WaveEffect, { type: waveEffect }, ButtonEl) : ButtonEl;
    return (React__default.createElement(FixedBox.FixedBox, { status: status, setStatus: setStatus, minWidth: minWidth, boxShadow: boxShadow, transitionClassName: transitionClassName, transitionType: transitionType, transitionDuration: transitionDuration, showAnimation: showAnimation, hideAnimation: hideAnimation, onRef: args => fixedBoxOnRef.current = args },
        FragmentEl,
        React__default.createElement(SelectFixedBoxElement.SelectFixedBoxElement, Object.assign({}, boxProps, { size: size, sizeSm: sizeSm, sizeMd: sizeMd, sizeLg: sizeLg, sizeXl: sizeXl, type: type, shape: shape }),
            React__default.createElement(Div.Div, { height: "inherit", minHeight: "inherit", maxHeight: "inherit" },
                search && React__default.createElement("section", null,
                    React__default.createElement(Input.Input, Object.assign({}, searchInputProps, { value: searchText, setValue: setSearchText }))),
                itemList.value))));
};

module.exports = ButtonSelect;
