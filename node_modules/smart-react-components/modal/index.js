'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var index = require('../index-6d498b59.js');
require('../DOMHelper-c0bd5a29.js');
var React = require('react');
var React__default = _interopDefault(React);
var styled = require('styled-components');
var styled__default = _interopDefault(styled);
require('../index-1781dba3.js');
require('../Div-d2bf7bfb.js');
require('react-dom');
require('../Transition-48c5648c.js');
var CSSTransition = require('../CSSTransition-157762f7.js');
var Overlay = require('../Overlay-c9458132.js');
var Element = require('../Element-a54cdab9.js');

const Modal = ({ children, overlayClick = true, overlayProps = index.DV.JSX_ELEMENT_PROPS, modalElementProps = index.DV.JSX_ELEMENT_PROPS, size = "default", centered, minWidth, maxWidth, status = true, setStatus, transitionClassName = "src-overlay-modal-down", transitionType, transitionDuration = 300, showAnimation = true, hideAnimation = true, beforeOpen, afterOpen, beforeClose, afterClose }) => {
    const theme = React__default.useContext(styled.ThemeContext).src;
    const overlayEl = React__default.useRef(null);
    const clickOverlay = (e) => {
        if (overlayClick && setStatus && e.target == overlayEl.current)
            setStatus(false);
    };
    return (React__default.createElement(CSSTransition.CSSTransition, { status: status, className: transitionClassName, type: transitionType, duration: transitionDuration, showAnimation: showAnimation, hideAnimation: hideAnimation, beforeShow: beforeOpen, afterShow: afterOpen, beforeHide: beforeClose, afterHide: afterClose },
        React__default.createElement(Overlay.Overlay, Object.assign({}, overlayProps, { elementProps: Object.assign(Object.assign({}, overlayProps.elementProps), { onMouseUp: clickOverlay, onTouchEnd: clickOverlay }), ref: overlayEl }),
            React__default.createElement(Element.ModalElement, Object.assign({ alignSelf: centered ? "center" : "flex-start" }, modalElementProps, { minWidthMd: minWidth || theme.modal.width[size], maxWidth: maxWidth || theme.modal.width[size] }), children))));
};

module.exports = Modal;
