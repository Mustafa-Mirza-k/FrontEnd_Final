'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var index = require('../index-6d498b59.js');
require('../DOMHelper-c0bd5a29.js');
var React = require('react');
var React__default = _interopDefault(React);
require('styled-components');
require('../index-1781dba3.js');
var Div = require('../Div-d2bf7bfb.js');
require('../Svg-5494338c.js');
require('../Close-e5f32b37.js');
require('../Badge-260e4ae6.js');
require('../Container-48ba71fa.js');
require('../Icon-7aca2465.js');
require('../Span-65e121ae.js');
require('../Text-7f09340d.js');
require('react-dom');
require('../Transition-48c5648c.js');
require('../CSSTransition-157762f7.js');
require('../ArrowDown-19219318.js');
var UseSelectMethods = require('../UseSelectMethods-8eaa7c41.js');
require('../Overlay-c9458132.js');
var FixedBox = require('../FixedBox-75852d65.js');
var SelectFixedBoxElement = require('../SelectFixedBoxElement-fd64adab.js');
require('../UseInputMethod-e6937228.js');
var UseInputOutput = require('../UseInputOutput-f9f1a610.js');
require('../SlideTransition-d17946ba.js');
require('../Label-d1f61e63.js');
require('../Input-a3426fbe.js');
var InputElement = require('../InputElement-e372853d.js');
var Input = require('../Input-19cf709f.js');

const SelectBox = ({ size = "default", sizeSm, sizeMd, sizeLg, sizeXl, containerProps = index.DV.JSX_ELEMENT_PROPS, selectProps = index.DV.JSX_ELEMENT_PROPS, boxProps = index.DV.JSX_ELEMENT_PROPS, labelProps = index.DV.JSX_ELEMENT_PROPS, label, children, placeholder, optionType = "primary", badgeType = "primary", arrow = true, active, setActive, type = "gray", fill, border, shape = "default", hover = true, waveEffect = "light", error, leftAddon, leftAddonProps = index.DV.JSX_ELEMENT_PROPS, leftAddonAbsolute, rightAddon, rightAddonProps = index.DV.JSX_ELEMENT_PROPS, rightAddonAbsolute, minWidth = 300, boxShadow, transitionClassName, transitionType, transitionDuration, showAnimation = true, hideAnimation = true, search, searchInputProps = index.DV.JSX_ELEMENT_PROPS }) => {
    const { itemList, searchText, setSearchText } = UseSelectMethods.useSelectMethods({ size, sizeSm, sizeMd, sizeLg, sizeXl, box: true, placeholder, children, optionType, badgeType, arrow, fill, shape, hover, waveEffect, disabled: selectProps.disabled, active, setActive, closeBox: (() => setStatus(false)), search });
    const [status, setStatus] = React__default.useState(false);
    const fixedBoxOnRef = React__default.useRef(null);
    React__default.useEffect(() => {
        if (fixedBoxOnRef.current)
            fixedBoxOnRef.current.setPosition();
    }, [itemList]);
    React__default.useEffect(() => {
        if (!Array.isArray(active))
            setStatus(false);
    }, [active]);
    return UseInputOutput.useInputOutput({
        element: (React__default.createElement(FixedBox.FixedBox, { status: status, setStatus: setStatus, minWidth: minWidth, boxShadow: boxShadow, transitionClassName: transitionClassName, transitionType: transitionType, transitionDuration: transitionDuration, showAnimation: showAnimation, hideAnimation: hideAnimation, onRef: args => fixedBoxOnRef.current = args },
            React__default.createElement(InputElement.Input, Object.assign({ tabIndex: 0 }, selectProps, { "size$": size, "size$Sm": sizeSm, "size$Md": sizeMd, "size$Lg": sizeLg, "size$Xl": sizeXl, "type$": type, "fill$": fill, "border$": border, shape: shape, leftAddon: leftAddon ? true : false, leftAddonAbsolute: leftAddonAbsolute, rightAddon: rightAddon ? true : false, rightAddonAbsolute: rightAddonAbsolute, inputElement: false, "data-src-placeholder-style": itemList.isPlaceholder, "data-src-active": status }), itemList.active),
            React__default.createElement(SelectFixedBoxElement.SelectFixedBoxElement, Object.assign({ size: size, sizeSm: sizeSm, sizeMd: sizeMd, sizeLg: sizeLg, sizeXl: sizeXl }, boxProps, { type: type, shape: shape }),
                React__default.createElement(Div.Div, { height: "inherit", minHeight: "inherit", maxHeight: "inherit" },
                    search && React__default.createElement("section", null,
                        React__default.createElement(Input.Input, Object.assign({}, searchInputProps, { value: searchText, setValue: setSearchText }))),
                    itemList.value)))),
        containerProps, inputProps: selectProps, labelProps, label, shape, leftAddon, leftAddonProps, leftAddonAbsolute, rightAddon, rightAddonProps, rightAddonAbsolute, error
    });
};

module.exports = SelectBox;
